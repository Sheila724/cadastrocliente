name: Deploy TESTWE Application

on:
  push:
    branches: [main]
  
  pull_request:
    types: [closed]
    branches: [main]

env:
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

  deploy:
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (production only)
        run: npm install --omit=dev

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: Sheila724/clientes-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
            SESSION_SECRET=${{ env.SESSION_SECRET }}
            NODE_ENV=production

      - name: SSH Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            #!/bin/bash
            set -e
            set -o pipefail
            
            # Create network and volume if not exists
            docker network inspect rede-da-sheila >/dev/null 2>&1 || docker network create rede-da-sheila
            docker volume inspect rede-da-sheila-postgres-data >/dev/null 2>&1 || docker volume create rede-da-sheila-postgres-data

            # PostgreSQL container
            if ! docker ps -a --filter "name=sheila_postgres" --format '{{.Names}}' | grep -q sheila_postgres; then
              docker run --name sheila_postgres \
                --network rede-da-sheila \
                -p 5432:5432 \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD='${{ env.POSTGRES_PASSWORD }}' \
                -e POSTGRES_DB=connect_sphere \
                -v rede-da-sheila-postgres-data:/var/lib/postgresql/data \
                --restart unless-stopped \
                -d postgres:17
            fi

            # Application container
            docker stop sheila_app || true
            docker rm sheila_app || true
            docker pull Sheila724/clientes-app:latest
            
            docker run --name sheila_app \
              --network rede-da-sheila \
              -p 8200:8200 \
              -e PORT=8200 \
              -e POSTGRES_HOST=sheila_postgres \
              -e POSTGRES_PORT=5432 \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_DB=connect_sphere \
              -e DISABLE_REDIS=true \
              -e SESSION_SECRET='${{ env.SESSION_SECRET }}' \
              -e NODE_ENV=production \
              --restart unless-stopped \
              -d Sheila724/clientes-app:latest

            # Health check with timeout
            echo "Waiting for application to start..."
            timeout 60 bash -c 'while ! docker logs sheila_app 2>&1 | tail -n 50 | grep -q "Server started"; do sleep 5; done' || \
              (echo "Application failed to start"; docker logs sheila_app; exit 1)