name: Deploy Full Stack

on:
  push:
    branches: [main]

env:
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  PORT: 8213
  DISABLE_REDIS: true
  NODE_ENV: production

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            sheila421/clientes-app:latest
            sheila421/clientes-app:${{ github.sha }}
          build-args: |
            POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
            SESSION_SECRET=${{ env.SESSION_SECRET }}
            NODE_ENV=${{ env.NODE_ENV }}
            PORT=${{ env.PORT }}
            DISABLE_REDIS=${{ env.DISABLE_REDIS }}

      # (Opcional) Debug de secret
      # PASSO DE DEBUG FINAL E CORRIGIDO
      # PASSO DE DEBUG FINAL E CORRIGIDO (Mais Robusto)
      - name: Verify POSTGRES_PASSWORD secret
        run: |
          # Use 'read -r' com here string para atribuir o valor da secret de forma mais robusta.
          # Isso é muito eficaz para lidar com caracteres especiais dentro da secret.
          read -r TEMP_POSTGRES_PASSWORD <<< "${{ secrets.POSTGRES_PASSWORD }}"

          if [ -z "$TEMP_POSTGRES_PASSWORD" ]; then
            echo "::error::POSTGRES_PASSWORD secret está vazia ou não definida no GitHub Actions!"
            exit 1
          else
            echo "POSTGRES_PASSWORD secret parece estar definida."
            # Usa a sintaxe do shell para obter o comprimento da string
            echo "Comprimento da senha: ${#TEMP_POSTGRES_PASSWORD}"
          fi
        shell: bash # Garante que o shell seja bash

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: |
            POSTGRES_PASSWORD
            SESSION_SECRET
            PORT
            DISABLE_REDIS
            NODE_ENV
          script: |
            #!/bin/bash
            set -e
            set -o pipefail
            echo "Iniciando deploy no servidor..."
            echo "Verificando/Criando rede Docker 'rede-da-sheila'..."
            docker network inspect rede-da-sheila >/dev/null 2>&1 || docker network create rede-da-sheila
            echo "Verificando/Criando volume Docker 'pgdata' para PostgreSQL..."
            docker volume create pgdata || true
            echo "Parando e removendo container PostgreSQL antigo (se existir)..."
            docker stop sheila_postgres || true
            docker rm sheila_postgres || true
            echo "Iniciando novo container PostgreSQL 'sheila_postgres' na porta 8214 do host..."
            docker run -d --name sheila_postgres \
              --network rede-da-sheila \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_DB=connect_sphere \
              -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
              -v pgdata:/var/lib/postgresql/data \
              -p 8214:5432 \
              postgres:17
            echo "PostgreSQL iniciado."
            echo "Aguardando o PostgreSQL ficar pronto para conexões (máx. 60s)..."
            timeout 60 bash -c 'until pg_isready -h sheila_postgres -p 5432 -U postgres; do echo "PostgreSQL ainda não pronto..."; sleep 2; done' || \
              (echo "Erro: PostgreSQL não ficou pronto no tempo limite!" && docker logs sheila_postgres && exit 1)
            echo "PostgreSQL está pronto para conexões."
            echo "Puxando a última imagem Docker da aplicação 'sheila421/clientes-app:latest'..."
            docker pull sheila421/clientes-app:latest
            echo "Parando e removendo container da aplicação antigo (se existir)..."
            docker stop sheila_app || true
            docker rm sheila_app || true
            echo "Iniciando novo container da aplicação 'sheila_app' na porta 8213 do host..."
            docker run -d \
              --name sheila_app \
              --network rede-da-sheila \
              -p 8213:8213 \
              -e PORT="${PORT}" \
              -e POSTGRES_HOST=sheila_postgres \
              -e POSTGRES_PORT=5432 \
              -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
              -e SESSION_SECRET="${SESSION_SECRET}" \
              -e NODE_ENV="${NODE_ENV}" \
              -e DISABLE_REDIS="${DISABLE_REDIS}" \
              sheila421/clientes-app:latest
            echo "Container da aplicação iniciado."
            echo "Aplicação disponível em http://201.23.3.86:8213 (substitua 'seu-host' pelo IP do seu servidor)."
            echo "Deploy finalizado. Verifique os logs da aplicação diretamente no servidor se houver problemas."
            echo "Últimos logs da aplicação 'sheila_app' para referência:"
            docker logs sheila_app